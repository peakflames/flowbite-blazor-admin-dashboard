@page "/crud/products"
@using Flowbite.Components
@using Flowbite.Icons
@using WebApp.Domain
@using WebApp.Components.Crud
@using System.Text.Json
@inject HttpClient Http

<main class="relative h-full w-full overflow-y-auto bg-white dark:bg-gray-800">
    <h1 class="hidden">CRUD: Products</h1>

    <div class="p-4">
        <!-- Breadcrumb -->
        <Breadcrumb Class="mb-5">
            <BreadcrumbItem Href="/">Home</BreadcrumbItem>
            <BreadcrumbItem Href="/crud/products">E-commerce</BreadcrumbItem>
            <BreadcrumbItem>Products</BreadcrumbItem>
        </Breadcrumb>

        <!-- Page Heading -->
        <Heading Tag="HeadingTag.H1" Class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">
            All products
        </Heading>

        <!-- Toolbar -->
        <div class="w-full py-4 text-gray-500 dark:text-gray-300">
            <div class="flex flex-wrap items-center justify-between">
                <!-- Search Input -->
                <div class="flex items-center space-x-2">
                    <TextInput @bind-Value="SearchQuery"
                              Placeholder="Search for users"
                              Class="me-4 w-80 border xl:w-96" />

                    <!-- Action Buttons -->
                    <div class="border-l border-gray-100 pl-2 dark:border-gray-700 flex items-center space-x-1">
                        <Button Color="ButtonColor.Dark"
                                Class="m-0 rounded p-1 hover:bg-gray-100 focus:ring-0 dark:hover:bg-gray-700">
                            <CogIcon Size="IconSize.Large" />
                        </Button>
                        <Button Color="ButtonColor.Dark"
                                Class="m-0 rounded p-1 hover:bg-gray-100 focus:ring-0 dark:hover:bg-gray-700">
                            <TrashBinIcon Size="IconSize.Large" />
                        </Button>
                        <Button Color="ButtonColor.Dark"
                                Class="m-0 rounded p-1 hover:bg-gray-100 focus:ring-0 dark:hover:bg-gray-700">
                            <ExclamationCircleIcon Size="IconSize.Large" />
                        </Button>
                        <Button Color="ButtonColor.Dark"
                                Class="m-0 rounded p-1 hover:bg-gray-100 focus:ring-0 dark:hover:bg-gray-700">
                            <DotsVerticalIcon Size="IconSize.Large" />
                        </Button>
                    </div>
                </div>

                <!-- Add Product Button -->
                <div class="space-x-2">
                    <Button Class="whitespace-nowrap"
                            OnClick="@(() => OpenAddProductModal())">
                        Add new product
                    </Button>
                </div>
            </div>
        </div>
    </div>

    <!-- Products Table -->
    <div class="overflow-x-auto">
        <Table>
            <TableHead class="border-y border-gray-200 bg-gray-100 dark:border-gray-700">
                <TableRow>
                    <TableHeadCell class="w-4 p-4">
                        <Checkbox />
                    </TableHeadCell>
                    <TableHeadCell class="ps-4 font-normal">Product Name</TableHeadCell>
                    <TableHeadCell class="ps-4 font-normal">Technology</TableHeadCell>
                    <TableHeadCell class="ps-4 font-normal">Description</TableHeadCell>
                    <TableHeadCell class="ps-4 font-normal">ID</TableHeadCell>
                    <TableHeadCell class="ps-4 font-normal">Price</TableHeadCell>
                    <TableHeadCell class="ps-4 font-normal">Discount</TableHeadCell>
                    <TableHeadCell class="ps-4 font-normal">Actions</TableHeadCell>
                </TableRow>
            </TableHead>
            <TableBody class="divide-y">
                @foreach (var product in FilteredProducts)
                {
                    <TableRow class="text-base">
                        <TableCell class="w-4 p-4">
                            <Checkbox />
                        </TableCell>
                        <TableCell class="flex items-center space-x-6 p-4 whitespace-nowrap">
                            <div class="text-sm font-normal text-gray-500 dark:text-gray-300">
                                <div class="text-base font-semibold text-gray-900 dark:text-white">
                                    @product.Name
                                </div>
                                <div class="text-sm font-normal text-gray-500 dark:text-gray-300">
                                    @product.Category
                                </div>
                            </div>
                        </TableCell>
                        <TableCell class="p-4">
                            @product.Technology
                        </TableCell>
                        <TableCell class="max-w-sm truncate overflow-hidden p-4 text-base font-normal text-gray-500 xl:max-w-xs dark:text-gray-300">
                            @product.Description
                        </TableCell>
                        <TableCell class="p-4">
                            #@product.Id
                        </TableCell>
                        <TableCell class="p-4">
                            @product.Price
                        </TableCell>
                        <TableCell class="p-4">
                            @product.Discount
                        </TableCell>
                        <TableCell class="space-x-2 whitespace-nowrap p-4">
                            <Button Size="ButtonSize.Small"
                                    Class="gap-2 px-3"
                                    OnClick="@(() => OpenEditProductModal(product))">
                                <EditIcon Size="IconSize.Small" />
                                Update
                            </Button>
                            <Button Color="ButtonColor.Red"
                                    Size="ButtonSize.Small"
                                    Class="gap-2 px-3"
                                    OnClick="@(() => OpenDeleteConfirmation(product))">
                                <TrashBinIcon Size="IconSize.Small" />
                                Delete item
                            </Button>
                        </TableCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
    </div>
</main>

<!-- Modals -->
<ProductModal @bind-Open="IsProductModalOpen"
              Product="@CurrentProduct"
              OnSave="@HandleProductSave" />

<DeleteModal @bind-Open="IsDeleteModalOpen"
             Title="Are you sure you want to delete this product?"
             OnConfirm="@HandleDeleteConfirm"
             OnCancel="@HandleDeleteCancel" />

@code {
    private List<Product> ProductsList { get; set; } = new();
    private string SearchQuery { get; set; } = "";
    private bool IsProductModalOpen { get; set; }
    private bool IsDeleteModalOpen { get; set; }
    private Product? CurrentProduct { get; set; }
    private Product? ProductToDelete { get; set; }

    private List<Product> FilteredProducts =>
        string.IsNullOrWhiteSpace(SearchQuery)
            ? ProductsList
            : ProductsList.Where(p =>
                p.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                p.Category.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                p.Technology.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                p.Description.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)
            ).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            var json = await Http.GetStringAsync("data/products.json");
            ProductsList = JsonSerializer.Deserialize<List<Product>>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            }) ?? new List<Product>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            ProductsList = new List<Product>();
        }
    }

    private void OpenAddProductModal()
    {
        CurrentProduct = new Product { Id = 0 };
        IsProductModalOpen = true;
    }

    private void OpenEditProductModal(Product product)
    {
        CurrentProduct = product;
        IsProductModalOpen = true;
    }

    private void OpenDeleteConfirmation(Product product)
    {
        ProductToDelete = product;
        IsDeleteModalOpen = true;
    }

    private async Task HandleProductSave(Product product)
    {
        if (product.Id == 0)
        {
            // Generate new ID
            product.Id = ProductsList.Any() ? ProductsList.Max(p => p.Id) + 1 : 100000;
            ProductsList.Add(product);
        }
        else
        {
            // Update existing product
            var existingProduct = ProductsList.FirstOrDefault(p => p.Id == product.Id);
            if (existingProduct != null)
            {
                existingProduct.Name = product.Name;
                existingProduct.Category = product.Category;
                existingProduct.Technology = product.Technology;
                existingProduct.Description = product.Description;
                existingProduct.Price = product.Price;
                existingProduct.Discount = product.Discount;
            }
        }
        await Task.CompletedTask;
    }

    private async Task HandleDeleteConfirm()
    {
        if (ProductToDelete != null)
        {
            ProductsList.Remove(ProductToDelete);
            ProductToDelete = null;
        }
        await Task.CompletedTask;
    }

    private async Task HandleDeleteCancel()
    {
        ProductToDelete = null;
        await Task.CompletedTask;
    }
}
