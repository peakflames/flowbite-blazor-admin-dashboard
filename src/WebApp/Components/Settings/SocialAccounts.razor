@using Flowbite.Components
@using WebApp.Domain

<Card Size="CardSize.ExtraLarge" class="shadow-sm">
    <h3 class="mb-4 text-xl font-semibold">Social accounts</h3>
    <div class="space-y-4">
        @foreach (var account in Accounts)
        {
            <div class="flex items-center justify-between border-b border-gray-200 pb-4 last:border-0 dark:border-gray-700">
                <div class="flex items-center gap-4">
                    @if (account.Icon != null)
                    {
                        <DynamicComponent Type="@account.Icon"
                                        Parameters="@(new Dictionary<string, object> {
                                            { "Class", "h-8 w-8" }
                                        })" />
                    }
                    <div>
                        <div class="font-semibold text-gray-900 dark:text-white">
                            @account.Platform
                        </div>
                        <div class="text-sm text-gray-500 dark:text-gray-400">
                            @(account.IsConnected ? account.Username : "Not connected")
                        </div>
                    </div>
                </div>
                <Button Color="@(account.IsConnected ? ButtonColor.Light : ButtonColor.Primary)"
                       Size="ButtonSize.Small"
                       OnClick="@(() => ToggleConnection(account))">
                    @(account.IsConnected ? "Disconnect" : "Connect")
                </Button>
            </div>
        }
    </div>
    <div class="mt-2">
        <Button Color="ButtonColor.Primary"
               OnClick="@HandleSaveAll">
            Save all
        </Button>
    </div>
</Card>

@code {
    [Parameter]
    public List<SocialAccount> Accounts { get; set; } = new();

    [Parameter]
    public EventCallback<SocialAccount> OnToggle { get; set; }

    [Parameter]
    public EventCallback OnSaveAll { get; set; }

    private async Task ToggleConnection(SocialAccount account)
    {
        account.IsConnected = !account.IsConnected;
        await OnToggle.InvokeAsync(account);
    }

    private async Task HandleSaveAll()
    {
        await OnSaveAll.InvokeAsync();
    }
}
