@using Flowbite.Components
@using WebApp.Domain

<Card Size="CardSize.ExtraLarge" class="@($"shadow-sm {Class}")">
    @if (!string.IsNullOrEmpty(Title))
    {
        <div class="mb-4">
            <h3 class="text-xl font-semibold">@Title</h3>
            @if (!string.IsNullOrEmpty(Subtitle))
            {
                <p class="text-sm text-gray-500 dark:text-gray-300">@Subtitle</p>
            }
        </div>
    }
    <div class="space-y-4">
        @foreach (var item in Items)
        {
            <div class="flex items-center justify-between">
                <div>
                    <div class="font-medium text-gray-900 dark:text-white">
                        @item.Title
                    </div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">
                        @item.Subtitle
                    </div>
                </div>
                <ToggleSwitch @bind-Checked="item.Active"
                             OnChange="@(() => HandleToggleChange(item))" />
            </div>
        }
    </div>
    <div class="mt-4">
        <Button Color="ButtonColor.Primary"
               OnClick="@HandleSaveAll">
            Save all
        </Button>
    </div>
</Card>

@code {
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Subtitle { get; set; }

    [Parameter]
    public List<NotificationItem> Items { get; set; } = new();

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public EventCallback<NotificationItem> OnToggleChanged { get; set; }

    [Parameter]
    public EventCallback OnSaveAll { get; set; }

    private async Task HandleToggleChange(NotificationItem item)
    {
        await OnToggleChanged.InvokeAsync(item);
    }

    private async Task HandleSaveAll()
    {
        await OnSaveAll.InvokeAsync();
    }
}
