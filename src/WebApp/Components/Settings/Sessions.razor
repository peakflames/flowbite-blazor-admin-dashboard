@using Flowbite.Components
@using WebApp.Domain

<Card Size="CardSize.ExtraLarge" class="shadow-sm">
    <div class="mb-4 flex items-center justify-between">
        <h3 class="text-xl font-semibold">Sessions</h3>
        <a href="@SeeMoreHref" class="text-sm font-medium text-primary-600 hover:underline dark:text-primary-500">
            See all
        </a>
    </div>
    <div class="space-y-4">
        @foreach (var session in SessionList)
        {
            <div class="flex items-center justify-between border-b border-gray-200 pb-4 last:border-0 dark:border-gray-700">
                <div class="flex items-center gap-4">
                    @if (session.Icon != null)
                    {
                        <DynamicComponent Type="@session.Icon"
                                        Parameters="@(new Dictionary<string, object> {
                                            { "Class", session.IconClass ?? "h-8 w-8" }
                                        })" />
                    }
                    <div>
                        <div class="font-semibold text-gray-900 dark:text-white">
                            @session.Device
                        </div>
                        <div class="text-sm text-gray-500 dark:text-gray-400">
                            @session.IpAddress
                        </div>
                    </div>
                </div>
                <Button Href="@session.ActionHref"
                       Color="ButtonColor.Light"
                       Size="ButtonSize.Small"
                       OnClick="@(() => HandleRevoke(session))">
                    @session.ActionButtonText
                </Button>
            </div>
        }
    </div>
</Card>

@code {
    [Parameter]
    public List<SessionInfo> SessionList { get; set; } = new();

    [Parameter]
    public string SeeMoreHref { get; set; } = "#";

    [Parameter]
    public EventCallback<SessionInfo> OnRevoke { get; set; }

    private async Task HandleRevoke(SessionInfo session)
    {
        await OnRevoke.InvokeAsync(session);
    }
}
